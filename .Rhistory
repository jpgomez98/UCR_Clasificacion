# ucr$indigena_mep <- factor(ucr$indigena_mep)
# ucr$territorio_indig_mep <- factor(ucr$territorio_indig_mep)
# ucr$lengua_indig_mep <- factor(ucr$lengua_indig_mep)
# ucr$bilingue_mep <- factor(ucr$bilingue_mep)
# ucr$bach_internacional_mep <- factor(ucr$bach_internacional_mep)
# ucr$admitido <- factor(ucr$admitido)
# levels(ucr$admitido) <- c("no admitido","admitido")
str(ucr)
mod_knnn <- knn3(admitido~.,data = train, k=5)
mod_knnn
pred_knn <- predict(mod_knnn, newdata = test, type = "class")
table(test$admitido,pred_knn)
rstudioapi::addTheme("https://raw.githubusercontent.com/batpigandme/night-owlish/master/rstheme/night-owlish.rstheme", apply = TRUE)
ucr <- read.csv("ucr.csv")
ucr$tipo_horario <- as.numeric(ucr$tipo_horario)
ucr$in0vacion_mep <- as.numeric(ucr$in0vacion_mep)
ucr$v_agregado_mep <- as.numeric(ucr$v_agregado_mep)
ucr$ambiental_mep <- as.numeric(ucr$ambiental_mep)
ucr$o_tecnolog_mep <- as.numeric(ucr$o_tecnolog_mep)
ucr$modeloiiicicloydiversificado_mep <- as.numeric(ucr$modeloiiicicloydiversificado_mep)
ucr$deportivo_mep <- as.numeric(ucr$deportivo_mep)
ucr$telesecundaria_mep <- as.numeric(ucr$telesecundaria_mep)
ucr$liceo_rural_mep <- as.numeric(ucr$liceo_rural_mep)
ucr$cientifico_mep <- as.numeric(ucr$cientifico_mep)
ucr$humanista_mep <- as.numeric(ucr$humanista_mep)
ucr$indigena_mep <- as.numeric(ucr$indigena_mep)
ucr$bilingue_mep <- as.numeric(ucr$bilingue_mep)
ucr$bach_internacional_mep <- as.numeric(ucr$bach_internacional_mep)
ucr$admitido <- factor(ucr$admitido)
levels(ucr$admitido) <- c("admitido","no admitido")
df <- ucr[,c(6,10:20,23:25)]
str(df)
# creo la base de train y test
RNGkind(sample.kind = "Rounding")
set.seed(10)
n=nrow(df)
s=sample(1:n,round(0.8*n))
# creo test y train con las variables binarias de interes
train=df[s,]
test=df[-s,]
base_knn <- rbind(train,test)
dist_dice <- as.matrix(dissimilarity(as.matrix(base_knn[,-15]),method = "dice"))[26071:32587,1:26070]# saco la matriz de distancias sin la variable respuesta y tomo los 6517 valores de los datos de validacion
library(readxl)
library(tidyverse)
library(cluster)
library(vegan)
suppressMessages(library(caret))
suppressMessages(library(DT))
suppressMessages(library(ROCR))
suppressMessages(library(class))
suppressMessages(library(kknn))
suppressMessages(library(e1071))
suppressMessages(library(plotly))
suppressMessages(library(adabag))
suppressMessages(library(randomForest))
library(modeest)
library(ISLR)
library(caret)
library(class)
install.packages("arules")
install.packages("modeest")
library(readxl)
library(tidyverse)
library(cluster)
library(vegan)
suppressMessages(library(caret))
suppressMessages(library(DT))
suppressMessages(library(ROCR))
suppressMessages(library(class))
suppressMessages(library(kknn))
suppressMessages(library(e1071))
suppressMessages(library(plotly))
suppressMessages(library(adabag))
suppressMessages(library(randomForest))
library(modeest)
library(ISLR)
library(caret)
library(class)
library(arules)
dist_dice <- as.matrix(dissimilarity(as.matrix(base_knn[,-15]),method = "dice"))[26071:32587,1:26070]# saco la matriz de distancias sin la variable respuesta y tomo los 6517 valores de los datos de validacion
dist_dice <- as.matrix(dissimilarity(as.matrix(base_knn[,-15]),method = "dice"))[26071:32587,1:26070]# saco la matriz de distancias sin la variable respuesta y tomo los 6517 valores de los datos de validacion
x <- c(1,1,1,1,1,2,2,2)
y <- c(1,2,2,2,1,1,1,2)
z <- c(1,2,1,2,2,2,1,1)
g <- data.frame(x,y,z)
dist <- vegdist(g,method = "jaccard")
dist
x <- c(1,1,1,1,1,0,0,0)
y <- c(1,0,0,0,1,1,1,0)
z <- c(1,0,1,0,0,0,1,1)
g <- data.frame(x,y,z)
str(g)
diss <- dissimilarity(as.matrix(g),method = "dice")
diss
plot(hclust(diss,method = "ward.D"))
x <- c(1,1,1,1,1,0,0,0)
y <- c(1,0,0,0,1,1,1,0)
z <- c(1,0,1,0,0,0,1,1)
g <- data.frame(x,y,z)
str(g)
diss <- dissimilarity(as.matrix(g),method = "dice")
diss
as.matrix(diss)
View(ucr)
ucr <- read.csv("ucr.csv")
ucr$tipo_horario <- as.numeric(ucr$tipo_horario)
ucr$in0vacion_mep <- as.numeric(ucr$in0vacion_mep)
ucr$v_agregado_mep <- as.numeric(ucr$v_agregado_mep)
ucr$ambiental_mep <- as.numeric(ucr$ambiental_mep)
ucr$o_tecnolog_mep <- as.numeric(ucr$o_tecnolog_mep)
ucr$modeloiiicicloydiversificado_mep <- as.numeric(ucr$modeloiiicicloydiversificado_mep)
ucr$deportivo_mep <- as.numeric(ucr$deportivo_mep)
ucr$telesecundaria_mep <- as.numeric(ucr$telesecundaria_mep)
ucr$liceo_rural_mep <- as.numeric(ucr$liceo_rural_mep)
ucr$cientifico_mep <- as.numeric(ucr$cientifico_mep)
ucr$humanista_mep <- as.numeric(ucr$humanista_mep)
ucr$indigena_mep <- as.numeric(ucr$indigena_mep)
ucr$bilingue_mep <- as.numeric(ucr$bilingue_mep)
ucr$bach_internacional_mep <- as.numeric(ucr$bach_internacional_mep)
ucr$admitido <- factor(ucr$admitido)
levels(ucr$admitido) <- c("admitido","no admitido")
df <- ucr[,c(6,10:20,23:25)]
str(df)
x <- df$humanista_mep
y <- df$tipo_horario
z <- df$indigena_mep
g <- data.frame(x,y,z)
str(g)
diss <- dissimilarity(as.matrix(g),method = "dice")
ucr <- read.csv("ucr.csv")
ucr$tipo_horario <- as.numeric(ucr$tipo_horario)
ucr$in0vacion_mep <- as.numeric(ucr$in0vacion_mep)
ucr$v_agregado_mep <- as.numeric(ucr$v_agregado_mep)
ucr$ambiental_mep <- as.numeric(ucr$ambiental_mep)
ucr$o_tecnolog_mep <- as.numeric(ucr$o_tecnolog_mep)
ucr$modeloiiicicloydiversificado_mep <- as.numeric(ucr$modeloiiicicloydiversificado_mep)
ucr$deportivo_mep <- as.numeric(ucr$deportivo_mep)
ucr$telesecundaria_mep <- as.numeric(ucr$telesecundaria_mep)
ucr$liceo_rural_mep <- as.numeric(ucr$liceo_rural_mep)
ucr$cientifico_mep <- as.numeric(ucr$cientifico_mep)
ucr$humanista_mep <- as.numeric(ucr$humanista_mep)
ucr$indigena_mep <- as.numeric(ucr$indigena_mep)
ucr$bilingue_mep <- as.numeric(ucr$bilingue_mep)
ucr$bach_internacional_mep <- as.numeric(ucr$bach_internacional_mep)
ucr$admitido <- factor(ucr$admitido)
levels(ucr$admitido) <- c("admitido","no admitido")
df <- ucr[,c(6,10:20,23:25)]
str(df)
gc()
x <- df$humanista_mep
y <- df$tipo_horario
z <- df$indigena_mep
g <- data.frame(x,y,z)
str(g)
diss <- dissimilarity(as.matrix(g),method = "dice")
as.matrix(diss)
gc()
gc()
gc()
x <- c(1,1,1,1,1,0,0,0)
y <- c(1,0,0,0,1,1,1,0)
z <- c(1,0,1,0,0,0,1,1)
g <- data.frame(x,y,z)
str(g)
diss <- dissimilarity(as.matrix(g),method = "dice")
``{r}
library(readxl)
library(tidyverse)
library(cluster)
library(vegan)
suppressMessages(library(caret))
suppressMessages(library(DT))
suppressMessages(library(ROCR))
suppressMessages(library(class))
suppressMessages(library(kknn))
suppressMessages(library(e1071))
suppressMessages(library(plotly))
suppressMessages(library(adabag))
suppressMessages(library(randomForest))
library(modeest)
library(ISLR)
library(caret)
library(class)
library(arules)
x <- c(1,1,1,1,1,0,0,0)
y <- c(1,0,0,0,1,1,1,0)
z <- c(1,0,1,0,0,0,1,1)
g <- data.frame(x,y,z)
str(g)
diss <- dissimilarity(as.matrix(g),method = "dice")
diss
1-diss
plot(hclust(diss,method = "ward.D"))
plot(hclust(1-diss,method = "ward.D"))
x1 <- c(1,1,1,1,1,0)
x2 <- c(1,1,0,0,0,0)
x3 <- c(0,1,0,0,0,0)
x4 <- c(0,0,1,1,0,0)
x5 <- c(1,0,0,0,1,1)
x5 <- c(1,1,1,1,1,0)
g <- data.frame(x1,x2,x3,x4,x5,x6)
x6 <- c(1,1,1,1,1,0)
g <- data.frame(x1,x2,x3,x4,x5,x6)
str(g)
g
rownames(g) <- c("leon","jirafa","vaca","oveja","gato","hombre")
g
diss <- dissimilarity(as.matrix(g),method = "dice")
diss
1-diss
plot(hclust(diss,method = "ward.D"))
plot(hclust(1-diss,method = "ward.D"))
diss <- dissimilarity(as.matrix(g),method = "jaccard")
diss
diss <- dissimilarity(as.matrix(g),method = "matching")
diss
plot(hclust(diss,method = "ward.D"))
plot(hclust(1-diss,method = "ward.D"))
diss <- dissimilarity(as.matrix(g),method = "matching")
diss
1-diss
plot(hclust(diss,method = "ward.D"))
diss <- dissimilarity(as.matrix(g),method = "dice")
diss
plot(hclust(diss,method = "ward.D"))
diss <- dissimilarity(as.matrix(g),method = "jaccard")
diss
1-diss
plot(hclust(diss,method = "ward.D"))
diss <- dissimilarity(as.matrix(g),method = "cosine")
diss
1-diss
plot(hclust(diss,method = "ward.D"))
diss <- dissimilarity(as.matrix(g),method = "affinity")
diss
1-diss
plot(hclust(diss,method = "ward.D"))
library(readxl)
library(tidyverse)
library(cluster)
library(vegan)
suppressMessages(library(caret))
suppressMessages(library(DT))
suppressMessages(library(ROCR))
suppressMessages(library(class))
suppressMessages(library(kknn))
suppressMessages(library(e1071))
suppressMessages(library(plotly))
suppressMessages(library(adabag))
suppressMessages(library(randomForest))
library(modeest)
library(ISLR)
library(arules)
library(cluster)
library(neuralnet)
library(shipunov)
library(StatMatch)
library(rattle)
library(modeest)
library(pROC)
ucr <- read.csv("ucr.csv")
ucr$colegio <- factor(ucr$colegio)
ucr$provincia <- factor(ucr$provincia)
ucr$canton <- factor(ucr$canton)
ucr$distrito <- factor(ucr$distrito)
ucr$tipo_colegio <- factor(ucr$tipo_colegio)
ucr$tipo_horario <- factor(ucr$tipo_horario)
ucr$tipo_modalidad <- factor(ucr$tipo_modalidad)
ucr$codigo_zona_procedencia <- factor(ucr$codigo_zona_procedencia)
ucr$rama1_mep <- factor(ucr$rama1_mep)
ucr$in0vacion_mep <- factor(ucr$in0vacion_mep)
ucr$v_agregado_mep <- factor(ucr$v_agregado_mep)
ucr$ambiental_mep <- factor(ucr$ambiental_mep)
ucr$o_tecnolog_mep <- factor(ucr$o_tecnolog_mep)
ucr$modeloiiicicloydiversificado_mep <- factor(ucr$modeloiiicicloydiversificado_mep)
ucr$deportivo_mep <- factor(ucr$deportivo_mep)
ucr$telesecundaria_mep <- factor(ucr$telesecundaria_mep)
ucr$liceo_rural_mep <- factor(ucr$liceo_rural_mep)
ucr$tipo_educa <- factor(ucr$tipo_educa)
ucr$indigena_mep <- factor(ucr$indigena_mep)
ucr$territorio_indig_mep <- factor(ucr$territorio_indig_mep)
ucr$lengua_indig_mep <- factor(ucr$lengua_indig_mep)
ucr$bilingue_mep <- factor(ucr$bilingue_mep)
ucr$bach_internacional_mep <- factor(ucr$bach_internacional_mep)
ucr$admitido <- factor(ucr$admitido)
levels(ucr$admitido) <- c("admitido","no admitido")
ucr <- ucr[,-c(1:4)]
str(ucr)
# train y test
RNGkind(sample.kind = "Rounding")
set.seed(10)
n=nrow(ucr)
s=sample(1:n,round(0.8*n))
train=ucr[s,]
test=ucr[-s,]
# Funcion para generar el grafico y calculo de AUC
curvaROC = function(pred,y, grafico = F) {
predict = prediction(pred,y)
auc = attributes(performance(predict,"auc"))$y.values[[1]]*100
des = performance(predict,"tpr","fpr")
p = NULL
if(grafico){
FP = attributes(des)$x.values[[1]]*100
PP = attributes(des)$y.values[[1]]*100
p <- plot_ly(x = FP, y = FP, name = 'Línea No Discrimina',
type = 'scatter', mode = 'lines',
line = list(color = 'rgba(0, 0, 0, 1)',
width = 4, dash = 'dot'),
fill = 'tozeroy',  fillcolor = 'rgba(0, 0, 0, 0)') %>%
add_trace(y = PP, name = paste('Curva ROC (AUC = ', round(auc,3),')', sep =""),
line = list(color = 'rgba(0, 0, 255, 1)', width = 4,
dash = 'line'),  fillcolor = 'rgba(0, 0, 255, 0.2)')%>%
layout(title = "Curva ROC",
xaxis = list(title = "<b>Falsos Positivos (%)<b>"),
yaxis = list (title = "<b>Precisión Positiva (%)<b>"))
}
return(list(auc = auc,grafico = p))
}
# eval
eval = function(y,pred){
confu=table(y,pred)
e = 1-sum(diag(confu))/sum(confu)
falsos = 1-diag(confu)/apply(confu, 1, sum)
error = c(e,falsos)*100
roc_object <- roc(y, as.numeric(pred))
auc <- auc(roc_object)[1]
indicadores = c(error,auc)
names(indicadores)=c("e","FP","FN","AUC")
return(list(Matriz=confu,indicadores=indicadores))
}
# knn con dist de gower
knngow <- function (train,test,k)
{#require(StatMatch)
p=dim(train)[2]
ntest=dim(test)[1]
ntrain=dim(train)[1]
classes=rep(0,ntest)
if(ntest==ntrain)
{     for(i in 1:ntest)
{ tempo=order(gower.dist(test[i,-p],train[-i,-p]))[1:k]
classes[i]=mlv(train[tempo,p])[1]}
}
else{
for(i in 1:ntest)
{ tempo=order(StatMatch::gower.dist(test[i,-p],train[,-p]))[1:k]
classes[i]=mlv(train[tempo,p])[1]}
}
classes
}
cortes=createFolds(1:nrow(ucr),k=10) # con 10 cortes
res2 = matrix(nrow = 10, ncol = 4)
colnames(res2) = c("e","FP","FN","AUC")
res_depth = matrix(nrow = 10, ncol = 4)
colnames(res_depth) = c("e","FP","FN","AUC")
res_abr2 <- list()
itera <- seq(1,15)
for (j in 1:length(itera)) {
for(i in 1:10){
train3 = ucr[-cortes[[i]],]
test3 = ucr[cortes[[i]],]
mod_arbol = rpart(admitido ~ ., method="class", data=train3,
control = rpart.control(minsplit = 326,minbucket = 163,cp = 0.005, maxdepth = itera[i]))
pred1=predict(mod_arbol,newdata = test3, type = "class")
f5=eval(test3$admitido, as.numeric(pred1))
res_depth[i,] = f5$indicadores
}
res_abr2[[j]] <- res_cp
}
medias_arb2 <- matrix(NA, nrow = length(itera), ncol = 4)
medias_arb2
for (i in 1:15) {
medias_arb2[i,] <- apply(res_abr[[i]], 2, mean)
}
for (i in 1:15) {
medias_arb2[i,] <- apply(res_abr2[[i]], 2, mean)
}
res_abr2
for (j in 1:length(itera)) {
for(i in 1:10){
train3 = ucr[-cortes[[i]],]
test3 = ucr[cortes[[i]],]
mod_arbol = rpart(admitido ~ ., method="class", data=train3,
control = rpart.control(minsplit = 326,minbucket = 163,cp = 0.005, maxdepth = itera[i]))
pred1=predict(mod_arbol,newdata = test3, type = "class")
f5=eval(test3$admitido, as.numeric(pred1))
res_depth[i,] = f5$indicadores
}
res_abr2[[j]] <- res_cp
}
for (j in 1:length(itera)) {
for(i in 1:10){
train3 = ucr[-cortes[[i]],]
test3 = ucr[cortes[[i]],]
mod_arbol = rpart(admitido ~ ., method="class", data=train3,
control = rpart.control(minsplit = 326,minbucket = 163,cp = 0.005, maxdepth = itera[i]))
pred1=predict(mod_arbol,newdata = test3, type = "class")
f5=eval(test3$admitido, as.numeric(pred1))
res_depth[i,] = f5$indicadores
}
res_abr2[[j]] <- res_depth
}
medias_arb2 <- matrix(NA, nrow = length(itera), ncol = 4)
for (i in 1:15) {
medias_arb2[i,] <- apply(res_abr2[[i]], 2, mean)
}
medias_arb2
matplot(medias_arb2[,4], type = "l", lty = 1, ylim = c(0.48,0.53), ylab = "AUC", xlab = "Repetición")
legend("topright", colnames(medias_arb2[,4]), col = 1:3, lty = 1, bty = "n")
medias_arb2[,4]
colnames(medias_arb2)[4]
matplot(medias_arb2[,4], type = "l", lty = 1, ylim = c(0.48,0.53), ylab = "AUC", xlab = "Repetición")
legend("topright", "AUC", col = 1:3, lty = 1, bty = "n")
medias=apply(medias_arb2[,4], 2, mean)
abline(h=medias, col=1:3,lty= 2)
res_cp = matrix(nrow = 10, ncol = 4)
colnames(res_arb) = c("e","FP","FN","AUC")
res_abr <- list()
itera <- seq(from = 0.00001, to = 0.05, length.out = 20)
for (j in 1:length(itera)) {
for(i in 1:10){
train3 = ucr[-cortes[[i]],]
test3 = ucr[cortes[[i]],]
mod_arbol = rpart(admitido ~ ., method="class", data=train3,
control = rpart.control(minsplit = 326,minbucket = 163,cp = itera[j]))
pred1=predict(mod_arbol,newdata = test3, type = "class")
f5=eval(test3$admitido, as.numeric(pred1))
res_cp[i,] = f5$indicadores
}
res_abr[[j]] <- res_cp
}
medias_arb <- matrix(NA, nrow = length(itera), ncol = 4)
for (i in 1:20) {
medias_arb[i,] <- apply(res_abr[[i]], 2, mean)
}
rownames(medias_arb) <- round(itera,6)
colnames(medias_arb) <- c("e","FP","FN","AUC")
AUC_tot <-cbind(res_abr[[3]][,4],res_abr[[4]][,4],res_abr[[5]][,4])
colnames(AUC_tot) <- c("cp: 0.005","cp: 0.0078","cp: 0.01")
matplot(AUC_tot, type = "l", lty = 1, ylim = c(0.48,0.53), ylab = "AUC", xlab = "Repetición")
legend("topright", colnames(AUC_tot), col = 1:3, lty = 1, bty = "n")
medias=apply(AUC_tot, 2, mean)
abline(h=medias, col=1:3,lty= 2)
res_bagg = matrix(nrow = 10, ncol = 4)
colnames(res_bagg) = c("e","FP","FN","AUC")
for(i in 1:10){
train3 = ucr[-cortes[[i]],]
test3 = ucr[cortes[[i]],]
mod_bagg=bagging(admitido~., method="class",
control = rpart.control(minsplit = 326,minbucket = 163,cp = 0.005, maxdepth = 7),
data = ucr, mfinal = 19)
pred_bagg = predict(mod_bagg,ucr)$class
f5=eval(test3$admitido, as.numeric(pred_bagg))
res_bagg[i,] = f5$indicadores
}
for(i in 1:10){
train3 = ucr[-cortes[[i]],]
test3 = ucr[cortes[[i]],]
mod_bagg=bagging(admitido~., method="class",
control = rpart.control(minsplit = 326,minbucket = 163,cp = 0.005, maxdepth = 7),
data = train3, mfinal = 19)
pred_bagg = predict(mod_bagg,test3)$class
f5=eval(test3$admitido, as.numeric(pred_bagg))
res_bagg[i,] = f5$indicadores
}
test3$admitido
pred_bagg
as.numeric(pred_bagg)
pred_bagg
as.numeric(factor(pred_bagg))
roc_object <- roc(test3$admitido, as.numeric(factor(pred_bagg)))
auc <- auc(roc_object)[1]
auc(roc_object)[1]
rm(f5)
rm(roc_object)
rm(auc)
res_bagg = matrix(nrow = 10, ncol = 4)
colnames(res_bagg) = c("e","FP","FN","AUC")
for(i in 1:10){
train3 = ucr[-cortes[[i]],]
test3 = ucr[cortes[[i]],]
mod_bagg=bagging(admitido~., method="class",
control = rpart.control(minsplit = 326,minbucket = 163,cp = 0.005, maxdepth = 7),
data = train3, mfinal = 19)
pred_bagg = predict(mod_bagg,test3)$class
f5=eval(test3$admitido, as.numeric(factor(pred_bagg)))
res_bagg[i,] = f5$indicadores
}
res_bagg
seq(1,15, each = 3)
seq(1,15, times = 3)
seq(15:21, by = 3)
seq(15,21, by = 3)
seq(15,21, by = 2)
seq(11,21, by = 2)
res_bagg = matrix(nrow = 10, ncol = 4)
colnames(res_bagg) = c("e","FP","FN","AUC")
bagg <- list()
mfinal <- seq(11,21, by = 2)
for (j in 1:length(itera)) {
for(i in 1:10){
train3 = ucr[-cortes[[i]],]
test3 = ucr[cortes[[i]],]
mod_bagg=bagging(admitido~., method="class",
control = rpart.control(minsplit = 326,minbucket = 163,cp = 0.005, maxdepth = 7),
data = train3, mfinal = mfinal[j])
pred_bagg = predict(mod_bagg,test3)$class
f5=eval(test3$admitido, as.numeric(factor(pred_bagg)))
res_bagg[i,] = f5$indicadores
}
bagg[[j]] <- res_bagg
}
bagg
